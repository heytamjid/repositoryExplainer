{
  "https://github.com/heytamjid/django-course": {
    "timestamp": 1755730452.5164018,
    "commit": "e3f7243e6435174cdda418b864f46599e30ac4e0",
    "summary": {
      "purpose_scope": "<p>Based on the provided files, this repository contains two distinct Django projects: <code>myproject</code> and <code>mytasks-webapp-django</code>.</p>\n\n<p><code>myproject</code>: This project appears to be a simple Django application serving a list of meals via a view (<code>myapp/views.py</code>) and template (<code>myapp/test.html</code>).  The data is hardcoded within the view.</p>\n\n<p><code>mytasks-webapp-django</code>: This project is a task management web application. It allows users to add, edit, delete, mark as complete, and manage tasks.  The application uses a database to store task information.</p>\n",
      "system_architecture": "<p>The repository contains two separate Django projects, each with its own <code>settings.py</code>, <code>urls.py</code>, <code>wsgi.py</code>, and <code>asgi.py</code> files.  Both projects utilize a standard Django project structure.  <code>mytasks-webapp-django</code> interacts with a database to manage tasks, while <code>myproject</code> uses hardcoded data.  The architecture is based on the Model-View-Controller (MVC) pattern, common in Django applications.</p>\n",
      "core_components": "<p><strong>myproject:</strong></p>\n\n<ul>\n<li>Uses Django's templating engine to render a list of meals.</li>\n<li>Data is hardcoded in <code>myapp/views.py</code>.</li>\n<li>No database interaction is evident.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n</ul>\n\n<p><strong>mytasks-webapp-django:</strong></p>\n\n<ul>\n<li>Uses Django's ORM to interact with a SQLite database (<code>db.sqlite3</code>).</li>\n<li><code>main/models.py</code> defines the <code>Tasksmodel</code> with fields for title, description, and completion status.</li>\n<li><code>main/views.py</code> contains the view logic for handling user interactions (adding, editing, deleting, completing tasks).</li>\n<li><code>main/urls.py</code> defines URL routes for different actions.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n<li>Uses Django's template engine for rendering views.</li>\n</ul>\n",
      "data_model": "<p><strong>mytasks-webapp-django:</strong></p>\n\n<p>The <code>main/models.py</code> file defines a single model:</p>\n\n<ul>\n<li><code>Tasksmodel</code>:\n<ul>\n<li><code>title</code> (CharField, max<em>length=64): The title of the task.</li>\n<li><code>description</code> (CharField, max</em>length=100): A description of the task.</li>\n<li><code>isCompleted</code> (BooleanField, default=False):  Indicates whether the task is completed.</li>\n</ul></li>\n</ul>\n\n<p><strong>myproject:</strong></p>\n\n<p>Insufficient information to generate this section.  No data model is explicitly defined.  Data is hardcoded within the <code>myapp/views.py</code> file.</p>\n"
    }
  },
  "https://github.com/heytamjid/dormitory-network": {
    "timestamp": 1755862099.3897066,
    "commit": "7001bd7fb4d49a4046c4cfb585ee85026040901e",
    "summary": {
      "purpose_scope": "<p>The Dormitory Network is a multi-functional Single Page Application (SPA) designed to enhance the academic and social experience of its users. Its primary purpose is to provide tools for tracking study times, fostering collaboration, and facilitating social connections.</p>\n\n<p>Key functionalities include:</p>\n\n<ul>\n<li><strong>Time Tracking:</strong> Users can track their live study times categorically (by course and topic) using HTMX AJAX requests and Django Sessions.</li>\n<li><strong>Study Group Creation:</strong> The application supports the creation and management of study groups.</li>\n<li><strong>Reporting &amp; Analytics:</strong> Generate reports on tracked time using Plotly JS, Pandas, and Django ORM for data visualization.</li>\n<li><strong>Social Networking:</strong> Connect users based on their major and interests.</li>\n<li><strong>Academic Rants:</strong> Provide a platform for users to post academic rants.</li>\n<li><strong>Real-time Active Users:</strong> Display currently active users and their study status using WebSockets.</li>\n</ul>\n\n<p>The scope of this project covers user authentication, personal time management, data visualization, and real-time user interaction within a dormitory setting.</p>\n",
      "system_architecture": "<p>The Dormitory Network employs a hybrid architecture combining a Django backend with a modern JavaScript frontend, leveraging both HTMX for dynamic content and React for interactive components, alongside WebSockets for real-time updates.</p>\n\n<ul>\n<li><p><strong>Backend (Django):</strong></p>\n\n<ul>\n<li><strong>Framework:</strong> Django serves as the core backend framework, handling routing, database interactions (ORM), user authentication, and API endpoints.</li>\n<li><strong>Database:</strong> A relational database (implied by Django ORM) stores user data, courses, topics, and tracked time entries.</li>\n<li><strong>REST API:</strong> Django REST Framework (DRF) is used to expose API endpoints for managing courses, topics, and tracked time, particularly for the React frontend.</li>\n<li><strong>Session Management:</strong> Django's built-in session management is utilized for user authentication and temporary data storage (e.g., active timer details).</li>\n<li><strong>Data Processing:</strong> Pandas is integrated within Django views for data manipulation and preparation for reporting.</li>\n<li><strong>Real-time (HTMX):</strong> HTMX is used for dynamic content updates on the dashboard, such as fetching topics based on selected courses and rendering tracked time entries without full page reloads.</li>\n<li><strong>WebSockets:</strong> A WebSocket endpoint (<code>/ws/active-now/</code>) is implemented to broadcast and receive real-time information about active users.</li>\n</ul></li>\n<li><p><strong>Frontend (React, HTMX, Webpack, Tailwind CSS):</strong></p>\n\n<ul>\n<li><strong>Hybrid Approach:</strong> The frontend uses a combination of HTMX for server-rendered HTML snippets and React for more complex, interactive components.</li>\n<li><strong>React:</strong> Components like <code>ActiveNow.jsx</code> are built with React, providing a dynamic user interface for real-time data.</li>\n<li><strong>Build System:</strong> Webpack, along with Babel, is used to bundle and transpile React/TypeScript code for the browser.</li>\n<li><strong>Styling:</strong> Tailwind CSS is employed for utility-first styling, with PostCSS for processing. Shadcn UI components (configured via <code>components.json</code>) are also integrated, suggesting a modern, component-based UI approach.</li>\n<li><strong>Data Visualization:</strong> Plotly JS is used on the frontend to render interactive charts based on data provided by Django views.</li>\n</ul></li>\n<li><p><strong>Interactions:</strong></p>\n\n<ul>\n<li>Users interact with the application through a web browser.</li>\n<li>HTMX requests are sent to Django views for partial page updates (e.g., <code>getTopics</code>, <code>start_timer</code>, <code>stop_timer_old</code>, <code>renderEntry</code>).</li>\n<li>React components communicate with Django REST Framework API endpoints for data (e.g., <code>CourseListView</code>, <code>TopicListView</code>, <code>TrackedTimeDBCreateView</code>, <code>start_timer</code>, <code>stop_timer</code>, <code>get_active_timer</code> for the newer React-based timer).</li>\n<li>The <code>ActiveNow</code> React component establishes a WebSocket connection to receive live updates on active users.</li>\n</ul></li>\n</ul>\n",
      "core_components": "<h3>Backend (Django)</h3>\n\n<ul>\n<li><p><strong><code>firstApp/models.py</code></strong>: Defines the database schema for the application.</p>\n\n<ul>\n<li><code>myUserDB</code>: Extends Django's <code>AbstractUser</code> to include <code>username</code> (primary key), <code>bio</code>, and <code>timezone</code>.</li>\n<li><code>Course</code>: Represents a course, linked to a <code>myUserDB</code> instance, with a <code>name</code> and <code>isArchived</code> status.</li>\n<li><code>Topic</code>: Represents a topic, linked to a <code>myUserDB</code> and optionally to a <code>Course</code>, with a <code>name</code>.</li>\n<li><code>TrackedTimeDB</code>: Stores individual time tracking sessions, linked to a <code>myUserDB</code>, <code>Course</code> (optional), and <code>Topic</code> (optional). It records <code>startTime</code>, <code>endTime</code>, <code>duration</code>, and a <code>session</code> description.</li>\n</ul></li>\n<li><p><strong><code>firstApp/forms.py</code></strong>: Django forms for user authentication and model data input.</p>\n\n<ul>\n<li><code>SignUpForm</code>: For user registration, based on <code>myUserDB</code>.</li>\n<li><code>LoginForm</code>: For user authentication.</li>\n<li><code>CourseForm</code>: For creating/editing <code>Course</code> instances.</li>\n<li><code>TopicForm</code>: For creating/editing <code>Topic</code> instances, making the <code>course</code> field optional.</li>\n<li><code>TrackedTimeForm</code>: For creating/editing <code>TrackedTimeDB</code> instances.</li>\n<li><code>myUserDBForm</code>: For editing <code>myUserDB</code> profile details.</li>\n</ul></li>\n<li><p><strong><code>firstApp/serializers.py</code></strong>: Django REST Framework serializers for API data representation.</p>\n\n<ul>\n<li><code>CourseSerializer</code>: Serializes <code>Course</code> model data, exposing <code>id</code> and <code>name</code>.</li>\n<li><code>TopicSerializer</code>: Serializes <code>Topic</code> model data, exposing <code>id</code>, <code>name</code>, and <code>course</code>.</li>\n<li><code>TrackedTimeDBSerializer</code>: Serializes <code>TrackedTimeDB</code> model data, exposing <code>startTime</code>, <code>endTime</code>, <code>course</code>, <code>topic</code>, and <code>session</code>. It enforces <code>startTime</code> and <code>endTime</code> as required fields for API input.</li>\n</ul></li>\n<li><p><strong><code>firstApp/views.py</code></strong>: Contains the logic for handling HTTP requests and rendering responses.</p>\n\n<ul>\n<li><strong>Authentication:</strong> <code>signup</code>, <code>loginFunc</code>, <code>logoutFunc</code> for user management.</li>\n<li><strong>Dashboard &amp; Content:</strong> <code>dashboard</code> renders the main user dashboard. <code>getTopics</code> dynamically fetches topics based on selected courses using HTMX.</li>\n<li><strong>CRUD Operations:</strong> <code>addCourse</code>, <code>addTopic</code>, <code>edit_topic</code>, <code>edit_course</code>, <code>edit_trackedtime</code>, <code>edit_user</code> for managing user-specific data.</li>\n<li><strong>Time Tracking (HTMX-based):</strong> <code>start_timer</code> (HTMX version) initiates a timer and stores start time/selected items in session. <code>stop_timer_old</code> (HTMX version) calculates duration, saves the <code>TrackedTimeDB</code> entry, and triggers a frontend update.</li>\n<li><strong>Time Tracking (React/DRF-based):</strong> <code>start_timer</code> (DRF API view) creates a <code>TrackedTimeDB</code> entry. <code>stop_timer</code> (DRF API view) updates an existing <code>TrackedTimeDB</code> entry. <code>get_active_timer</code> (DRF API view) retrieves the current active timer. <code>TrackedTimeDBCreateView</code> is a generic DRF view for creating tracked time entries.</li>\n<li><strong>Entry Rendering:</strong> <code>renderEntry</code>, <code>renderEntrybyCourse</code>, <code>renderEntrybyTopic</code> fetch and render recent tracked time entries, optionally filtered by course or topic.</li>\n<li><strong>Active Users:</strong> <code>active_users</code> (HTMX version) retrieves and renders a list of users with active sessions. The <code>ActiveNow.jsx</code> component uses a WebSocket for real-time active user updates.</li>\n<li><strong>User Profile:</strong> <code>user_profile</code> displays details for a specific user.</li>\n<li><strong>Reporting:</strong> <code>reportView</code> renders the report page. <code>get_bar_chart_data</code> processes <code>TrackedTimeDB</code> data using Pandas and Plotly Express to generate an HTML bar chart, including custom hover data.</li>\n<li><strong>DRF API Views:</strong> <code>CourseListView</code>, <code>TopicListView</code>, <code>TrackedTimeDBCreateView</code> provide API endpoints for React components.</li>\n</ul></li>\n</ul>\n\n<h3>Frontend (React, HTMX, Webpack, Tailwind CSS)</h3>\n\n<ul>\n<li><strong><code>package.json</code></strong>: Lists project dependencies and scripts.\n<ul>\n<li><strong>Dependencies:</strong> React, ReactDOM, <code>@radix-ui/react-select</code>, <code>class-variance-authority</code>, <code>clsx</code>, <code>lodash</code>, <code>lucide-react</code>, <code>react-axios</code>, <code>tailwind-merge</code>, <code>tailwindcss-animate</code>.</li>\n<li><strong>DevDependencies:</strong> Webpack, Webpack-CLI, Babel (core, preset-env, preset-react, preset-typescript), TypeScript types for React, Autoprefixer, PostCSS, Tailwind CSS, CSS Loader, Style Loader.</li>\n<li><strong>Scripts:</strong> <code>dev</code> for running Webpack in development mode with watch.</li>\n</ul></li>\n<li><strong><code>assets/index.jsx</code></strong>: The main entry point for the React application, rendering the <code>App</code> component into the <code>root</code> DOM element.</li>\n<li><strong><code>assets/myComponents/ActiveNow.jsx</code></strong>: A React functional component that establishes a WebSocket connection to <code>/ws/active-now/</code> to receive and display a real-time list of active users, their total active time today, and their current study session details.</li>\n<li><strong><code>components.json</code></strong>: Configuration for Shadcn UI components, specifying style, TypeScript usage, Tailwind CSS integration, and alias paths for components, utilities, and hooks.</li>\n<li><strong><code>tailwind.config.js</code></strong>: Tailwind CSS configuration file, defining content paths for scanning, extending the default theme with custom colors, border radii, box shadows, translate values, and font weights. It also includes the <code>tailwindcss-animate</code> plugin.</li>\n<li><strong><code>firstApp/templates/base.html</code></strong>: The base HTML template for Django, including static file loading, HTMX, Flowbite, and Tailwind CSS CDNs. It serves as the foundation for other templates.</li>\n</ul>\n\n<h3>Other</h3>\n\n<ul>\n<li><strong><code>DormitoryNetwork/wsgi.py</code></strong>: Standard Django WSGI configuration for deploying the application.</li>\n<li><strong><code>firstApp/admin.py</code></strong>: Currently empty, indicating that models are not yet registered with the Django admin interface.</li>\n</ul>\n",
      "data_model": "<p>The application's data is structured across several Django models, defining users, their academic contexts, and tracked activities.</p>\n\n<h3><code>myUserDB</code></h3>\n\n<p>Extends Django's built-in <code>AbstractUser</code> model for user authentication and profile information.\n*   <strong><code>username</code></strong>: <code>CharField</code>, max<em>length=32, unique, primary</em>key. The user's unique identifier.\n*   <strong><code>bio</code></strong>: <code>TextField</code>, optional (blank=True, null=True). A short description about the user.\n*   <strong><code>timezone</code></strong>: <code>TimeZoneField</code>, default='Asia/Dhaka', optional (null=True). Stores the user's preferred timezone for localized time display.</p>\n\n<h3><code>Course</code></h3>\n\n<p>Represents an academic course or subject.\n*   <strong><code>id</code></strong>: (Implicit) Auto-incrementing integer primary key.\n*   <strong><code>name</code></strong>: <code>CharField</code>, max_length=128. The name of the course.\n*   <strong><code>isArchived</code></strong>: <code>BooleanField</code>, default=False. Indicates if the course is archived.\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. The user who owns this course. Related name: <code>CourseUnderUser</code>.</p>\n\n<h3><code>Topic</code></h3>\n\n<p>Represents a specific topic within a course or a standalone topic.\n*   <strong><code>id</code></strong>: (Implicit) Auto-incrementing integer primary key.\n*   <strong><code>name</code></strong>: <code>CharField</code>, max_length=128. The name of the topic.\n*   <strong><code>course</code></strong>: <code>ForeignKey</code> to <code>Course</code>, <code>on_delete=models.SET_NULL</code>, optional (null=True). The course this topic belongs to. Can be null if the topic is standalone. Related name: <code>TopicUnderCourse</code>.\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. The user who owns this topic. Related name: <code>TopicUnderUser</code>.</p>\n\n<h3><code>TrackedTimeDB</code></h3>\n\n<p>Records individual time tracking sessions.\n*   <strong><code>id</code></strong>: (Implicit) Auto-incrementing integer primary key.\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. The user who tracked this time. Related name: <code>trackedTimeUnderUser</code>.\n*   <strong><code>startTime</code></strong>: <code>DateTimeField</code>. The start time of the tracking session.\n*   <strong><code>endTime</code></strong>: <code>DateTimeField</code>, optional (null=True, blank=True). The end time of the tracking session. Can be null if the session is ongoing.\n*   <strong><code>duration</code></strong>: <code>DurationField</code>, optional (null=True, blank=True). The calculated duration of the session.\n*   <strong><code>course</code></strong>: <code>ForeignKey</code> to <code>Course</code>, <code>on_delete=models.SET_NULL</code>, optional (null=True, blank=True). The course associated with this session. Related name: <code>trackedTimeUnderCourse</code>.\n*   <strong><code>topic</code></strong>: <code>ForeignKey</code> to <code>Topic</code>, <code>on_delete=models.SET_NULL</code>, optional (null=True, blank=True). The topic associated with this session. Related name: <code>trackedTimeUnderTopic</code>.\n*   <strong><code>session</code></strong>: <code>CharField</code>, max_length=128, optional (null=True, blank=True). A descriptive string for the session.</p>\n"
    }
  },
  "https://github.com/heytamjid/banking-management-system": {
    "timestamp": 1755768760.4359047,
    "commit": "e0f3174661fc241007b3ef52e42dcfaadf1ad543",
    "summary": {
      "purpose_scope": "<p>This repository contains a simple, command-line based banking system implemented in Python. Its primary purpose is to simulate basic banking operations for both users and administrators.</p>\n\n<p>The scope of this system includes:\n*   <strong>User Account Management</strong>: Creation, login, balance inquiry, deposit, withdrawal, fund transfer, loan application, and transaction history viewing.\n*   <strong>Administrator Account Management</strong>: Creation, login, monitoring of total bank balance and total outstanding loans, and control over the bank's loan feature.\n*   <strong>In-Memory Data Storage</strong>: All data is stored in volatile memory, meaning it is lost upon program termination.</p>\n",
      "system_architecture": "<p>The system follows a monolithic architecture, with all core functionalities encapsulated within a single <code>Bank</code> class in <code>main.py</code>.</p>\n\n<ul>\n<li><strong>Core Logic</strong>: The <code>Bank</code> class manages all user and administrative operations, including account data, financial transactions, and system settings.</li>\n<li><strong>Data Storage</strong>: Data is stored entirely in-memory using Python lists and scalar variables within the <code>Bank</code> class instance. There is no external database or persistent storage mechanism.</li>\n<li><strong>User Interface</strong>: Interaction is exclusively through a Command-Line Interface (CLI), utilizing <code>input()</code> for user commands and <code>print()</code> for displaying information and menus.</li>\n<li><strong>Execution Flow</strong>: The application runs in a continuous loop, presenting a main menu for user and admin login/account creation. Upon successful login, users or admins are directed to their respective dashboards to perform operations until they choose to log out or exit the application.</li>\n</ul>\n",
      "core_components": "<p>The system's functionality is primarily driven by the <code>Bank</code> class and its methods.</p>\n\n<ul>\n<li><strong><code>Bank</code> Class</strong>:\n<ul>\n<li><strong>Initialization (<code>__init__</code>)</strong>: Sets up all in-memory data structures (lists for user/admin data, balances, transaction histories) and initializes bank-wide metrics (total balance, total loan) and features (loan feature status).</li>\n<li><strong>User Interface Methods</strong>:\n<ul>\n<li><code>UserLogInMenu()</code>: Displays the main menu for account creation, user login, admin account creation, and admin login.</li>\n<li><code>userDashBoard()</code>: Presents options available to a logged-in user.</li>\n<li><code>adminDashBoard()</code>: Presents options available to a logged-in administrator.</li>\n</ul></li>\n<li><strong>User Account Management</strong>:\n<ul>\n<li><code>CreateANewAccount()</code>: Handles the creation of new user accounts, collecting name and password, and assigning a unique UserID. It initializes the user's balance, loan status, and transaction history.</li>\n<li><code>UserLogIn()</code>: Authenticates a user based on their UserID and password. Manages login tokens to track active user sessions.</li>\n</ul></li>\n<li><strong>Financial Transaction Methods</strong>:\n<ul>\n<li><code>depositeAmount(id)</code>: Allows a user to deposit funds into their account, updating their balance and the bank's total balance. Records the transaction in history.</li>\n<li><code>withdrawAmount(id)</code>: Enables a user to withdraw funds, checking for sufficient balance in both the user's account and the bank's total. Records the transaction.</li>\n<li><code>checkAmount(id)</code>: Displays the current balance and outstanding loan amount for a specific user.</li>\n<li><code>transferAmount(id)</code>: Facilitates transferring funds from one user account to another, including checks for sufficient balance and valid receiver ID. Records transactions for both sender and receiver.</li>\n<li><code>takeLoan(id)</code>: Allows a user to apply for a loan, subject to the bank's loan feature status, a maximum loan limit (twice the current balance plus existing loan), and the bank's total available balance. Updates user balance, loan amount, and bank's total loan and balance. Records the transaction.</li>\n<li><code>history(id)</code>: Displays the transaction history for a given user.</li>\n</ul></li>\n<li><strong>Admin Account Management</strong>:\n<ul>\n<li><code>createadminacc()</code>: Handles the creation of new admin accounts, collecting post/email and password, and assigning a unique AdminID.</li>\n<li><code>loginadminacc()</code>: Authenticates an administrator based on their AdminID and password. Manages admin login tokens.</li>\n</ul></li>\n<li><strong>Admin Oversight Methods</strong>:\n<ul>\n<li>Direct access to <code>totalbankbalance</code> and <code>totalloan</code> for reporting.</li>\n<li><code>loanfeaturecontrol()</code>: Allows an administrator to toggle the bank's loan feature on or off, affecting whether users can apply for loans.</li>\n</ul></li>\n<li><strong>Basic Error Handling</strong>: Includes <code>try-except</code> blocks for input type conversions and logical checks for invalid IDs or insufficient funds.</li>\n</ul></li>\n</ul>\n",
      "data_model": "<p>The system's data model is entirely in-memory, represented by Python lists and scalar variables within the <code>Bank</code> class. User and admin data are stored in parallel lists, where the index often corresponds to the UserID or AdminID.</p>\n\n<p><strong>User-Specific Data:</strong>\n*   <code>self.useriddb</code>: <code>list</code> - Stores user IDs. The index <code>i</code> corresponds to UserID <code>i</code>. A value of <code>i</code> indicates the user exists, <code>-1</code> indicates the account is closed.\n*   <code>self.passworddb</code>: <code>list</code> - Stores passwords for users, indexed by UserID.\n*   <code>self.namedb</code>: <code>list</code> - Stores names or emails of account holders, indexed by UserID.\n*   <code>self.phonedb</code>: <code>list</code> - Intended for phone numbers, but currently not actively used in account creation.\n*   <code>self.logintokendb</code>: <code>list</code> - Stores login status for users (1 for logged in, 0 for logged out), indexed by UserID.\n*   <code>self.amountdb</code>: <code>list</code> - Stores the current balance for each user account, indexed by UserID.\n*   <code>self.loandb</code>: <code>list</code> - Stores the outstanding loan amount for each user. A negative value indicates a loan (e.g., -100 means 100 BDT loan), indexed by UserID.\n*   <code>self.transactionhistory</code>: <code>list</code> of <code>list</code>s - A 2D list where <code>transactionhistory[i]</code> is a list of strings detailing transactions for UserID <code>i</code>.\n*   <code>self.topuserid</code>: <code>int</code> - The next available UserID to be assigned to a new account.</p>\n\n<p><strong>Administrator-Specific Data:</strong>\n*   <code>self.adminiddb</code>: <code>list</code> - Stores admin IDs. Similar to <code>useriddb</code>.\n*   <code>self.adminpostdb</code>: <code>list</code> - Stores admin posts or emails, indexed by AdminID.\n*   <code>self.adminpassworddb</code>: <code>list</code> - Stores passwords for admins, indexed by AdminID.\n*   <code>self.adminlogintokendb</code>: <code>list</code> - Stores login status for admins, indexed by AdminID.\n*   <code>self.topadminid</code>: <code>int</code> - The next available AdminID to be assigned to a new admin account.</p>\n\n<p><strong>Bank-Wide Data:</strong>\n*   <code>self.totalbankbalance</code>: <code>float</code> - The aggregate sum of all funds held by the bank across all user accounts.\n*   <code>self.totalloan</code>: <code>float</code> - The aggregate sum of all outstanding loans granted by the bank.\n*   <code>self.loanfeature</code>: <code>int</code> (0 or 1) - A flag indicating whether the loan feature is currently enabled (1) or disabled (0) for users.</p>\n"
    }
  },
  "https://github.com/srshadiq/Job-portal/": {
    "timestamp": 1755812361.1076443,
    "commit": "e68405ddfcb07955c4e012ae19ff23fd9e6e4f9e",
    "summary": {
      "purpose_scope": "<p>The \"JobFinder\" application is designed as a comprehensive job portal, facilitating the connection between job seekers (Applicants) and employers.</p>\n\n<p>Its primary purposes include:</p>\n\n<ul>\n<li><strong>User Authentication &amp; Authorization:</strong> Providing mechanisms for user sign-up and login, with distinct roles (Applicant, Employer) that govern access to specific functionalities and content.</li>\n<li><strong>Job Search &amp; Discovery:</strong> Enabling applicants to search for job opportunities using various criteria, such as job title and type.</li>\n<li><strong>Job Posting &amp; Management:</strong> Allowing employers to create new job listings and manage the lifecycle of their posted jobs (e.g., viewing active, draft, or closed positions).</li>\n<li><strong>Job Application:</strong> Providing a streamlined process for applicants to apply to jobs, including the submission of necessary documents like resumes and cover letters.</li>\n<li><strong>Talent Discovery &amp; Management:</strong> Offering tools for employers to identify and interact with potential candidates (applicants), including scheduling interviews, extending job offers, and managing application statuses.</li>\n<li><strong>User Profile Management:</strong> Enabling users, particularly applicants, to build and maintain detailed personal and professional profiles, including certifications.</li>\n<li><strong>System Error Handling:</strong> Implementing a robust system for handling and communicating errors to the client in a structured and informative manner.</li>\n</ul>\n\n<p>The scope of this system encompasses the end-to-end workflow of a job portal, from user interface interactions on the frontend to business logic processing and data persistence on the backend.</p>\n",
      "system_architecture": "<p>The JobFinder application employs a client-server architecture, consisting of a React-based frontend and a Spring Boot-based backend.</p>\n\n<p><strong>Frontend (Client-side):</strong></p>\n\n<ul>\n<li><strong>Technology Stack:</strong> Built with React, leveraging Redux for state management, Mantine for UI components, and developed using TypeScript.</li>\n<li><strong>Routing:</strong> Utilizes <code>react-router-dom</code> to manage client-side navigation, defining routes for various pages such as job listings, talent search, job posting, application forms, and user profiles.</li>\n<li><strong>State Management:</strong> Redux Toolkit is used for centralized state management, handling user authentication status (<code>UserSlice</code>), user profile data (<code>ProfileSlice</code>), and job/talent search filters (<code>FilterSlice</code>).</li>\n<li><strong>User Interface:</strong> Composed of modular React components (e.g., <code>SignUpPage</code>, <code>WelcomePage</code>, <code>TalentCard</code>, <code>PostedJob</code>, <code>CompanyCard</code>, <code>CertificationCardProfile</code>, <code>ApplyJob</code>, <code>PostJobPage</code>) that provide a responsive and interactive user experience.</li>\n<li><strong>Authentication &amp; Authorization:</strong> Implements role-based access control via <code>RoleProtectedRoute</code> to restrict access to certain routes based on the user's <code>accountType</code> (APPLICANT or EMPLOYER).</li>\n<li><strong>Theming:</strong> Supports a theming mechanism, indicated by the <code>useTheme</code> context, allowing for adaptable visual styles.</li>\n</ul>\n\n<p><strong>Backend (Server-side):</strong></p>\n\n<ul>\n<li><strong>Technology Stack:</strong> Developed using Spring Boot and Java.</li>\n<li><strong>APIs:</strong> Exposes RESTful APIs for various functionalities, including profile management (<code>ProfileAPI</code>) and job-related operations (defined by <code>JobService</code>).</li>\n<li><strong>Data Persistence:</strong> MongoDB is used as the primary database, configured via <code>application.properties</code>. Spring Data MongoDB facilitates data access and persistence operations (e.g., <code>ProfileRepository</code>).</li>\n<li><strong>Security:</strong> Spring Security is configured to permit all requests (<code>/**</code>) and disable CSRF protection, indicating a simplified security setup or reliance on external authentication mechanisms. It uses <code>BCryptPasswordEncoder</code> for secure password hashing.</li>\n<li><strong>Exception Handling:</strong> A global <code>@RestControllerAdvice</code> (<code>ExceptionControllerAdvice</code>) intercepts and handles various exceptions (e.g., <code>Exception</code>, <code>JobPortalExpection</code>, validation errors), returning standardized <code>ErrorInfo</code> DTOs with appropriate HTTP status codes.</li>\n<li><strong>Utilities:</strong> Includes a <code>Utilities</code> component responsible for generating sequential IDs for database documents using MongoDB's <code>findAndModify</code> operation, ensuring unique identifiers across collections.</li>\n</ul>\n\n<p>The frontend communicates with the backend via HTTP requests to perform operations such as data retrieval, job creation, job application, and profile updates.</p>\n",
      "core_components": "<p><strong>Frontend Components:</strong></p>\n\n<ul>\n<li><strong><code>SignUpPage.tsx</code></strong>: A page component responsible for rendering either the <code>SignUp</code> or <code>Login</code> form based on the current URL. It features a responsive design, adapting its layout for mobile and desktop views.</li>\n<li><strong><code>WelcomePage.tsx</code></strong>: The application's landing page, providing a search interface for jobs. It integrates with Redux to dispatch filter updates (<code>updateFilter</code>, <code>resetFilter</code>) and navigates the user to the job listings page upon search.</li>\n<li><strong><code>AppRoutes.tsx</code></strong>: The central routing configuration component. It defines all application routes and implements <code>RoleProtectedRoute</code> to enforce role-based access control, ensuring that only users with specific roles (APPLICANT, EMPLOYER) can access designated pages.</li>\n<li><strong><code>TalentCard.tsx</code></strong>: Displays a summary of an applicant's profile for employers. It enables employers to manage application statuses by scheduling interviews, sending offers, or rejecting applicants via calls to the <code>changeAppStatus</code> service. It also fetches detailed applicant profiles using <code>ProfileService</code>.</li>\n<li><strong><code>PostedJob.tsx</code></strong>: A component used by employers to view and filter their job postings. It categorizes jobs into \"Active\", \"Drafts\", and \"Closed\" using Mantine Tabs and displays them accordingly.</li>\n<li><strong><code>CertificationCardProfile.tsx</code></strong>: A reusable UI component for displaying and managing individual certification entries within a user's profile. It allows for the deletion of certifications by interacting with the Redux <code>ProfileSlice</code>.</li>\n<li><strong>Redux Slices (<code>FilterSlice.tsx</code>, <code>Store.tsx</code>):</strong>\n<ul>\n<li><code>FilterSlice</code>: Manages the state related to job search filters, providing actions to update and reset filter criteria.</li>\n<li><code>Store.tsx</code>: Configures the Redux store, combining <code>userReducer</code>, <code>profileReducer</code>, and <code>filterReducer</code> to create a single source of truth for the application's global state.</li>\n</ul></li>\n</ul>\n\n<p><strong>Backend Components:</strong></p>\n\n<ul>\n<li><strong><code>ExceptionControllerAdvice.java</code></strong>: A global exception handler implemented as a Spring <code>@RestControllerAdvice</code>. It intercepts various exceptions (including <code>Exception</code>, custom <code>JobPortalExpection</code>, and validation errors), transforms them into standardized <code>ErrorInfo</code> DTOs, and returns appropriate HTTP status codes to the client.</li>\n<li><strong><code>JobService.java</code> (Interface)</strong>: Defines the contract for all job-related business logic operations. This includes methods for posting new jobs, retrieving job listings, handling job applications, and managing the status of existing applications.</li>\n<li><strong><code>ProfileAPI.java</code></strong>: A Spring <code>@RestController</code> that provides RESTful endpoints for managing user profiles. It supports operations such as retrieving a single user profile by ID, fetching a list of all profiles, and updating existing profile information.</li>\n<li><strong><code>Utilities.java</code></strong>: A Spring <code>@Component</code> that provides a static utility method, <code>getNextSequence</code>. This method is crucial for generating auto-incrementing sequence IDs for documents stored in MongoDB, ensuring unique identifiers for entities like jobs or profiles.</li>\n<li><strong><code>SecurityConfig.java</code></strong>: Configures Spring Security for the backend application. It disables CSRF protection and permits all incoming HTTP requests (<code>/**</code>), indicating a potentially simplified security model or reliance on external authentication. It also defines a <code>BCryptPasswordEncoder</code> bean for hashing user passwords securely.</li>\n</ul>\n",
      "data_model": "<p>Based on the provided DTOs, entities, and repository interfaces, the following core data models are inferred:</p>\n\n<ul>\n<li><strong><code>Job</code></strong>:\n<ul>\n<li>Represents a job posting.</li>\n<li>Attributes suggested by <code>JobService</code> and <code>PostedJob.tsx</code>: <code>id</code> (Long, likely auto-generated), <code>jobTitle</code> (String), <code>company</code> (String), <code>postTime</code> (LocalDateTime), <code>applicants</code> (List of <code>Application</code> or <code>ApplicantDTO</code>), <code>jobStatus</code> (Enum: <code>ACTIVE</code>, <code>DRAFT</code>, <code>CLOSED</code>).</li>\n<li>Additional implied attributes: job description, requirements, location, salary range, etc.</li>\n</ul></li>\n<li><strong><code>Applicant</code> / <code>Profile</code></strong>:\n<ul>\n<li>Represents a user profile, particularly for job applicants.</li>\n<li><code>id</code> (Long): Unique identifier for the profile.</li>\n<li><code>name</code> (String).</li>\n<li><code>jobTitle</code> (String): Current or desired job title.</li>\n<li><code>company</code> (String): Current or previous company.</li>\n<li><code>skills</code> (List of String).</li>\n<li><code>about</code> (String): A brief description or bio.</li>\n<li><code>totalExperience</code> (Integer): Years of experience.</li>\n<li><code>location</code> (String).</li>\n<li><code>email</code> (String).</li>\n<li><code>website</code> (String).</li>\n<li><code>resume</code> (String): Base64 encoded PDF of the resume.</li>\n<li><code>coverLetter</code> (String).</li>\n<li><code>picture</code> (String): Base64 encoded image for the profile avatar.</li>\n<li><code>certifications</code> (List of <code>Certification</code>): List of professional certifications.</li>\n</ul></li>\n<li><strong><code>Application</code></strong>:\n<ul>\n<li>Represents an application submitted by an applicant for a specific job.</li>\n<li><code>id</code> (Long): Likely the ID of the job to which the application pertains.</li>\n<li><code>applicantId</code> (Long): The ID of the applicant who submitted the application.</li>\n<li><code>interviewTime</code> (LocalDateTime): Scheduled time for an interview, if applicable.</li>\n<li><code>applicationStatus</code> (Enum: <code>ApplicationStatus</code>): The current status of the application.</li>\n</ul></li>\n<li><strong><code>ApplicationStatus</code> (Enum)</strong>:\n<ul>\n<li>Defines the possible states an application can be in:\n<ul>\n<li><code>APPLIED</code>: Application has been submitted.</li>\n<li><code>INTERVIEWING</code>: Applicant is in the interview process.</li>\n<li><code>OFFERED</code>: Job offer has been extended.</li>\n<li><code>REJECTED</code>: Application has been rejected.</li>\n</ul></li>\n</ul></li>\n<li><strong><code>Certification</code></strong>:\n<ul>\n<li>Represents a professional certification obtained by an applicant.</li>\n<li><code>name</code> (String): Name of the certification (e.g., \"AWS Certified Developer\").</li>\n<li><code>issuer</code> (String): The issuing body (e.g., \"Amazon Web Services\").</li>\n<li><code>issueDate</code> (String): Date the certification was issued.</li>\n<li><code>certificateId</code> (String): Unique identifier for the certificate.</li>\n</ul></li>\n<li><strong><code>Sequence</code></strong>:\n<ul>\n<li>An internal MongoDB collection used by <code>Utilities</code> to manage auto-incrementing IDs.</li>\n<li><code>_id</code> (String): The name of the sequence (e.g., \"jobid\", \"profileid\").</li>\n<li><code>seq</code> (Long): The current sequence value.</li>\n</ul></li>\n<li><strong><code>ResponseDTO</code></strong>:\n<ul>\n<li>A generic data transfer object used for simple API responses, typically containing a <code>message</code> string to convey success or basic information.</li>\n</ul></li>\n<li><strong><code>ErrorInfo</code></strong>:\n<ul>\n<li>A data transfer object used for structured error responses from the backend.</li>\n<li><code>message</code> (String): A descriptive error message.</li>\n<li><code>statusCode</code> (Integer): The HTTP status code associated with the error.</li>\n<li><code>timestamp</code> (LocalDateTime): The time when the error occurred.</li>\n</ul></li>\n</ul>\n\n<p><strong>Database:</strong></p>\n\n<ul>\n<li><strong>MongoDB</strong>: The application uses MongoDB as its persistence layer. The connection URI is configured as <code>mongodb://localhost:27017/jobportal</code> in <code>application.properties</code>.</li>\n<li>Automatic index creation is enabled (<code>spring.data.mongodb.auto-index-creation=true</code>).</li>\n</ul>\n"
    }
  }
}