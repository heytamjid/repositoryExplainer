{
  "https://github.com/heytamjid/django-course": {
    "timestamp": 1755730452.5164018,
    "commit": "e3f7243e6435174cdda418b864f46599e30ac4e0",
    "summary": {
      "purpose_scope": "<p>Based on the provided files, this repository contains two distinct Django projects: <code>myproject</code> and <code>mytasks-webapp-django</code>.</p>\n\n<p><code>myproject</code>: This project appears to be a simple Django application serving a list of meals via a view (<code>myapp/views.py</code>) and template (<code>myapp/test.html</code>).  The data is hardcoded within the view.</p>\n\n<p><code>mytasks-webapp-django</code>: This project is a task management web application. It allows users to add, edit, delete, mark as complete, and manage tasks.  The application uses a database to store task information.</p>\n",
      "system_architecture": "<p>The repository contains two separate Django projects, each with its own <code>settings.py</code>, <code>urls.py</code>, <code>wsgi.py</code>, and <code>asgi.py</code> files.  Both projects utilize a standard Django project structure.  <code>mytasks-webapp-django</code> interacts with a database to manage tasks, while <code>myproject</code> uses hardcoded data.  The architecture is based on the Model-View-Controller (MVC) pattern, common in Django applications.</p>\n",
      "core_components": "<p><strong>myproject:</strong></p>\n\n<ul>\n<li>Uses Django's templating engine to render a list of meals.</li>\n<li>Data is hardcoded in <code>myapp/views.py</code>.</li>\n<li>No database interaction is evident.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n</ul>\n\n<p><strong>mytasks-webapp-django:</strong></p>\n\n<ul>\n<li>Uses Django's ORM to interact with a SQLite database (<code>db.sqlite3</code>).</li>\n<li><code>main/models.py</code> defines the <code>Tasksmodel</code> with fields for title, description, and completion status.</li>\n<li><code>main/views.py</code> contains the view logic for handling user interactions (adding, editing, deleting, completing tasks).</li>\n<li><code>main/urls.py</code> defines URL routes for different actions.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n<li>Uses Django's template engine for rendering views.</li>\n</ul>\n",
      "data_model": "<p><strong>mytasks-webapp-django:</strong></p>\n\n<p>The <code>main/models.py</code> file defines a single model:</p>\n\n<ul>\n<li><code>Tasksmodel</code>:\n<ul>\n<li><code>title</code> (CharField, max<em>length=64): The title of the task.</li>\n<li><code>description</code> (CharField, max</em>length=100): A description of the task.</li>\n<li><code>isCompleted</code> (BooleanField, default=False):  Indicates whether the task is completed.</li>\n</ul></li>\n</ul>\n\n<p><strong>myproject:</strong></p>\n\n<p>Insufficient information to generate this section.  No data model is explicitly defined.  Data is hardcoded within the <code>myapp/views.py</code> file.</p>\n"
    }
  },
  "https://github.com/heytamjid/dormitory-network": {
    "timestamp": 1755730567.1437476,
    "commit": "7001bd7fb4d49a4046c4cfb585ee85026040901e",
    "summary": {
      "purpose_scope": "<p>This repository contains the code for a web application called \"Dormitory Network.\"  Based on the provided code, the application aims to track users' study time, categorized by courses and topics. It includes features for user signup/login, a timer to track study sessions, and the ability to add courses and topics.  The application also incorporates a real-time active user display using WebSockets and provides reporting capabilities.  Additionally, there's evidence of API endpoints for courses and topics, suggesting an integration with a RESTful API.  The application uses Django, React, and Tailwind CSS.</p>\n",
      "system_architecture": "<p>The application follows a client-server architecture. The frontend is built using React and utilizes a combination of HTMX for AJAX requests and WebSockets for real-time updates. The backend is implemented using Django, which handles database interactions, user authentication, and API requests.  The application uses a WebSocket connection to broadcast real-time updates on active users.  Data persistence is managed by a SQLite database (as indicated in <code>settings.py</code>), although this could be easily changed.  The frontend uses Tailwind CSS for styling.</p>\n",
      "core_components": "<p>The application's core components include:</p>\n\n<ul>\n<li><strong>Django Backend:</strong>  Handles routing (<code>DormitoryNetwork/urls.py</code>, <code>firstApp/urls.py</code>), user authentication (<code>firstApp/forms.py</code>), database models (<code>firstApp/models.py</code>), API endpoints (<code>firstApp/serializers.py</code>, <code>firstApp/views.py</code> - not provided, but inferred), and WebSocket handling (<code>firstApp/consumers.py</code>, <code>DormitoryNetwork/asgi.py</code>).  The backend uses Django Channels for WebSocket communication.</li>\n<li><strong>React Frontend:</strong>  Provides the user interface (<code>assets/App.jsx</code>, <code>assets/index.jsx</code>, <code>assets/myComponents/Timer.jsx</code>, <code>assets/myComponents/ActiveNow.jsx</code>).  The frontend makes use of Shadcn UI components and interacts with the Django backend via AJAX and WebSockets.</li>\n<li><strong>Database:</strong> A SQLite database stores user information, courses, topics, and tracked study time.</li>\n<li><strong>Styling:</strong> Tailwind CSS is used for styling the application (<code>assets/index.css</code>, <code>tailwind.config.js</code>).</li>\n<li><strong>Webpack:</strong> Bundles the React frontend code (<code>webpack.config.js</code>).</li>\n</ul>\n",
      "data_model": "<p>The data model consists of the following entities:</p>\n\n<ul>\n<li><strong>myUserDB:</strong> Represents a user, with fields for username (primary key), email, bio, and timezone.  Inherits from Django's <code>AbstractUser</code>.</li>\n<li><strong>Course:</strong> Represents a course, with fields for name, <code>isArchived</code> (boolean), and a foreign key to <code>myUserDB</code>.</li>\n<li><strong>Topic:</strong> Represents a topic within a course, with fields for name, a foreign key to <code>Course</code>, and a foreign key to <code>myUserDB</code>.</li>\n<li><strong>TrackedTimeDB:</strong> Represents a tracked study session, with fields for a foreign key to <code>myUserDB</code>, <code>startTime</code>, <code>endTime</code> (nullable), <code>duration</code> (nullable), foreign keys to <code>Course</code> and <code>Topic</code> (both nullable), and <code>session</code> (a text field for description).</li>\n</ul>\n"
    }
  },
  "https://github.com/heytamjid/banking-management-system": {
    "timestamp": 1755768760.4359047,
    "commit": "e0f3174661fc241007b3ef52e42dcfaadf1ad543",
    "summary": {
      "purpose_scope": "<p>This repository contains a simple, command-line based banking system implemented in Python. Its primary purpose is to simulate basic banking operations for both users and administrators.</p>\n\n<p>The scope of this system includes:\n*   <strong>User Account Management</strong>: Creation, login, balance inquiry, deposit, withdrawal, fund transfer, loan application, and transaction history viewing.\n*   <strong>Administrator Account Management</strong>: Creation, login, monitoring of total bank balance and total outstanding loans, and control over the bank's loan feature.\n*   <strong>In-Memory Data Storage</strong>: All data is stored in volatile memory, meaning it is lost upon program termination.</p>\n",
      "system_architecture": "<p>The system follows a monolithic architecture, with all core functionalities encapsulated within a single <code>Bank</code> class in <code>main.py</code>.</p>\n\n<ul>\n<li><strong>Core Logic</strong>: The <code>Bank</code> class manages all user and administrative operations, including account data, financial transactions, and system settings.</li>\n<li><strong>Data Storage</strong>: Data is stored entirely in-memory using Python lists and scalar variables within the <code>Bank</code> class instance. There is no external database or persistent storage mechanism.</li>\n<li><strong>User Interface</strong>: Interaction is exclusively through a Command-Line Interface (CLI), utilizing <code>input()</code> for user commands and <code>print()</code> for displaying information and menus.</li>\n<li><strong>Execution Flow</strong>: The application runs in a continuous loop, presenting a main menu for user and admin login/account creation. Upon successful login, users or admins are directed to their respective dashboards to perform operations until they choose to log out or exit the application.</li>\n</ul>\n",
      "core_components": "<p>The system's functionality is primarily driven by the <code>Bank</code> class and its methods.</p>\n\n<ul>\n<li><strong><code>Bank</code> Class</strong>:\n<ul>\n<li><strong>Initialization (<code>__init__</code>)</strong>: Sets up all in-memory data structures (lists for user/admin data, balances, transaction histories) and initializes bank-wide metrics (total balance, total loan) and features (loan feature status).</li>\n<li><strong>User Interface Methods</strong>:\n<ul>\n<li><code>UserLogInMenu()</code>: Displays the main menu for account creation, user login, admin account creation, and admin login.</li>\n<li><code>userDashBoard()</code>: Presents options available to a logged-in user.</li>\n<li><code>adminDashBoard()</code>: Presents options available to a logged-in administrator.</li>\n</ul></li>\n<li><strong>User Account Management</strong>:\n<ul>\n<li><code>CreateANewAccount()</code>: Handles the creation of new user accounts, collecting name and password, and assigning a unique UserID. It initializes the user's balance, loan status, and transaction history.</li>\n<li><code>UserLogIn()</code>: Authenticates a user based on their UserID and password. Manages login tokens to track active user sessions.</li>\n</ul></li>\n<li><strong>Financial Transaction Methods</strong>:\n<ul>\n<li><code>depositeAmount(id)</code>: Allows a user to deposit funds into their account, updating their balance and the bank's total balance. Records the transaction in history.</li>\n<li><code>withdrawAmount(id)</code>: Enables a user to withdraw funds, checking for sufficient balance in both the user's account and the bank's total. Records the transaction.</li>\n<li><code>checkAmount(id)</code>: Displays the current balance and outstanding loan amount for a specific user.</li>\n<li><code>transferAmount(id)</code>: Facilitates transferring funds from one user account to another, including checks for sufficient balance and valid receiver ID. Records transactions for both sender and receiver.</li>\n<li><code>takeLoan(id)</code>: Allows a user to apply for a loan, subject to the bank's loan feature status, a maximum loan limit (twice the current balance plus existing loan), and the bank's total available balance. Updates user balance, loan amount, and bank's total loan and balance. Records the transaction.</li>\n<li><code>history(id)</code>: Displays the transaction history for a given user.</li>\n</ul></li>\n<li><strong>Admin Account Management</strong>:\n<ul>\n<li><code>createadminacc()</code>: Handles the creation of new admin accounts, collecting post/email and password, and assigning a unique AdminID.</li>\n<li><code>loginadminacc()</code>: Authenticates an administrator based on their AdminID and password. Manages admin login tokens.</li>\n</ul></li>\n<li><strong>Admin Oversight Methods</strong>:\n<ul>\n<li>Direct access to <code>totalbankbalance</code> and <code>totalloan</code> for reporting.</li>\n<li><code>loanfeaturecontrol()</code>: Allows an administrator to toggle the bank's loan feature on or off, affecting whether users can apply for loans.</li>\n</ul></li>\n<li><strong>Basic Error Handling</strong>: Includes <code>try-except</code> blocks for input type conversions and logical checks for invalid IDs or insufficient funds.</li>\n</ul></li>\n</ul>\n",
      "data_model": "<p>The system's data model is entirely in-memory, represented by Python lists and scalar variables within the <code>Bank</code> class. User and admin data are stored in parallel lists, where the index often corresponds to the UserID or AdminID.</p>\n\n<p><strong>User-Specific Data:</strong>\n*   <code>self.useriddb</code>: <code>list</code> - Stores user IDs. The index <code>i</code> corresponds to UserID <code>i</code>. A value of <code>i</code> indicates the user exists, <code>-1</code> indicates the account is closed.\n*   <code>self.passworddb</code>: <code>list</code> - Stores passwords for users, indexed by UserID.\n*   <code>self.namedb</code>: <code>list</code> - Stores names or emails of account holders, indexed by UserID.\n*   <code>self.phonedb</code>: <code>list</code> - Intended for phone numbers, but currently not actively used in account creation.\n*   <code>self.logintokendb</code>: <code>list</code> - Stores login status for users (1 for logged in, 0 for logged out), indexed by UserID.\n*   <code>self.amountdb</code>: <code>list</code> - Stores the current balance for each user account, indexed by UserID.\n*   <code>self.loandb</code>: <code>list</code> - Stores the outstanding loan amount for each user. A negative value indicates a loan (e.g., -100 means 100 BDT loan), indexed by UserID.\n*   <code>self.transactionhistory</code>: <code>list</code> of <code>list</code>s - A 2D list where <code>transactionhistory[i]</code> is a list of strings detailing transactions for UserID <code>i</code>.\n*   <code>self.topuserid</code>: <code>int</code> - The next available UserID to be assigned to a new account.</p>\n\n<p><strong>Administrator-Specific Data:</strong>\n*   <code>self.adminiddb</code>: <code>list</code> - Stores admin IDs. Similar to <code>useriddb</code>.\n*   <code>self.adminpostdb</code>: <code>list</code> - Stores admin posts or emails, indexed by AdminID.\n*   <code>self.adminpassworddb</code>: <code>list</code> - Stores passwords for admins, indexed by AdminID.\n*   <code>self.adminlogintokendb</code>: <code>list</code> - Stores login status for admins, indexed by AdminID.\n*   <code>self.topadminid</code>: <code>int</code> - The next available AdminID to be assigned to a new admin account.</p>\n\n<p><strong>Bank-Wide Data:</strong>\n*   <code>self.totalbankbalance</code>: <code>float</code> - The aggregate sum of all funds held by the bank across all user accounts.\n*   <code>self.totalloan</code>: <code>float</code> - The aggregate sum of all outstanding loans granted by the bank.\n*   <code>self.loanfeature</code>: <code>int</code> (0 or 1) - A flag indicating whether the loan feature is currently enabled (1) or disabled (0) for users.</p>\n"
    }
  }
}