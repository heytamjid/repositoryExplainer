{
  "https://github.com/heytamjid/django-course": {
    "timestamp": 1755730452.5164018,
    "commit": "e3f7243e6435174cdda418b864f46599e30ac4e0",
    "summary": {
      "purpose_scope": "<p>Based on the provided files, this repository contains two distinct Django projects: <code>myproject</code> and <code>mytasks-webapp-django</code>.</p>\n\n<p><code>myproject</code>: This project appears to be a simple Django application serving a list of meals via a view (<code>myapp/views.py</code>) and template (<code>myapp/test.html</code>).  The data is hardcoded within the view.</p>\n\n<p><code>mytasks-webapp-django</code>: This project is a task management web application. It allows users to add, edit, delete, mark as complete, and manage tasks.  The application uses a database to store task information.</p>\n",
      "system_architecture": "<p>The repository contains two separate Django projects, each with its own <code>settings.py</code>, <code>urls.py</code>, <code>wsgi.py</code>, and <code>asgi.py</code> files.  Both projects utilize a standard Django project structure.  <code>mytasks-webapp-django</code> interacts with a database to manage tasks, while <code>myproject</code> uses hardcoded data.  The architecture is based on the Model-View-Controller (MVC) pattern, common in Django applications.</p>\n",
      "core_components": "<p><strong>myproject:</strong></p>\n\n<ul>\n<li>Uses Django's templating engine to render a list of meals.</li>\n<li>Data is hardcoded in <code>myapp/views.py</code>.</li>\n<li>No database interaction is evident.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n</ul>\n\n<p><strong>mytasks-webapp-django:</strong></p>\n\n<ul>\n<li>Uses Django's ORM to interact with a SQLite database (<code>db.sqlite3</code>).</li>\n<li><code>main/models.py</code> defines the <code>Tasksmodel</code> with fields for title, description, and completion status.</li>\n<li><code>main/views.py</code> contains the view logic for handling user interactions (adding, editing, deleting, completing tasks).</li>\n<li><code>main/urls.py</code> defines URL routes for different actions.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n<li>Uses Django's template engine for rendering views.</li>\n</ul>\n",
      "data_model": "<p><strong>mytasks-webapp-django:</strong></p>\n\n<p>The <code>main/models.py</code> file defines a single model:</p>\n\n<ul>\n<li><code>Tasksmodel</code>:\n<ul>\n<li><code>title</code> (CharField, max<em>length=64): The title of the task.</li>\n<li><code>description</code> (CharField, max</em>length=100): A description of the task.</li>\n<li><code>isCompleted</code> (BooleanField, default=False):  Indicates whether the task is completed.</li>\n</ul></li>\n</ul>\n\n<p><strong>myproject:</strong></p>\n\n<p>Insufficient information to generate this section.  No data model is explicitly defined.  Data is hardcoded within the <code>myapp/views.py</code> file.</p>\n"
    }
  },
  "https://github.com/heytamjid/dormitory-network": {
    "timestamp": 1755799795.0600607,
    "commit": "7001bd7fb4d49a4046c4cfb585ee85026040901e",
    "summary": {
      "purpose_scope": "<p>The Dormitory Network is a multi-functional Single Page Application (SPA) designed to enhance productivity and community engagement for users, likely students or residents in a dormitory setting. Its primary functionalities include:</p>\n\n<ul>\n<li><strong>Time Tracking:</strong> Users can track their study or activity times categorically by associating sessions with specific courses and topics. This feature utilizes HTMX for dynamic updates and sessions for state management.</li>\n<li><strong>Reporting:</strong> The system generates reports based on tracked time data, leveraging Python's Pandas library for data manipulation and Plotly.js for interactive visualizations.</li>\n<li><strong>Community &amp; Social Features:</strong> The platform aims to connect users with similar academic interests, facilitate the creation of study groups, and provide a space for users to post academic-related \"rants.\"</li>\n<li><strong>User Management:</strong> Standard user authentication (sign-up, login, logout) and profile management are supported.</li>\n<li><strong>Real-time Activity Monitoring:</strong> Provides real-time visibility into currently active users and their study status.</li>\n</ul>\n\n<p>The scope of this application covers personal productivity tracking, data analysis for self-improvement, and fostering a collaborative academic environment within a dormitory context.</p>\n",
      "system_architecture": "<p>The Dormitory Network employs a hybrid architecture combining a Django backend with a modern JavaScript frontend, utilizing both HTMX for server-side rendering enhancements and React for interactive SPA components, all communicating via REST APIs and WebSockets.</p>\n\n<ul>\n<li><strong>Backend (Django):</strong>\n<ul>\n<li>Built with Python's Django framework, handling core application logic, user authentication, data persistence (via Django ORM), and serving web pages.</li>\n<li><strong>Django REST Framework (DRF):</strong> Provides RESTful API endpoints for interaction with the frontend, enabling CRUD operations on data models like courses, topics, and tracked time entries.</li>\n<li><strong>Django Channels:</strong> Extends Django to handle WebSockets, facilitating real-time communication for features like active user tracking. The <code>daphne</code> ASGI server is used for this.</li>\n</ul></li>\n<li><strong>Frontend (Hybrid HTMX &amp; React):</strong>\n<ul>\n<li><strong>HTMX:</strong> Integrated into Django templates (<code>dashboard.html</code>, <code>partials/topics.html</code>, <code>entries.html</code>) to enable dynamic content updates and partial page rendering without full page reloads, enhancing the user experience with AJAX capabilities.</li>\n<li><strong>React:</strong> Used for building interactive Single Page Application (SPA) components, such as the <code>Timer.jsx</code> and <code>ActiveNow.jsx</code>. These components manage their own state and interact with the backend via REST APIs and WebSockets.</li>\n<li><strong>TypeScript:</strong> The React components are written in TypeScript for improved code quality and maintainability.</li>\n<li><strong>Webpack:</strong> Used to bundle the React/TypeScript frontend assets into a single <code>index-bundle.js</code> file for efficient serving.</li>\n</ul></li>\n<li><strong>Styling &amp; UI:</strong>\n<ul>\n<li><strong>Tailwind CSS:</strong> A utility-first CSS framework used for styling the application, configured via <code>tailwind.config.js</code> and processed by <code>postcss.config.js</code>.</li>\n<li><strong>Shadcn UI:</strong> A collection of reusable React components (e.g., <code>Button</code>, <code>Input</code>, <code>Select</code>) built on Radix UI and styled with Tailwind CSS, providing a consistent and modern UI.</li>\n<li><strong>Flowbite:</strong> A UI component library for Tailwind CSS, also integrated for additional styling and interactive elements.</li>\n</ul></li>\n<li><strong>Data Analysis &amp; Visualization:</strong>\n<ul>\n<li><strong>Pandas:</strong> Used on the backend for data manipulation and analysis of tracked time data, likely in preparation for reporting.</li>\n<li><strong>Plotly:</strong> Used for generating interactive data visualizations within reports.</li>\n</ul></li>\n</ul>\n",
      "core_components": "<p>The system's functionality is delivered through a combination of Django applications, React components, and supporting libraries:</p>\n\n<ul>\n<li><strong><code>firstApp</code> (Django Application):</strong>\n<ul>\n<li><strong>Models:</strong> Defines the database schema for users, courses, topics, and tracked time entries (see Data Model section for details).</li>\n<li><strong>Forms:</strong> Provides Django forms (<code>SignUpForm</code>, <code>LoginForm</code>, <code>CourseForm</code>, <code>TopicForm</code>, <code>TrackedTimeForm</code>, <code>myUserDBForm</code>) for user input and data validation, facilitating user registration, login, and CRUD operations on related data.</li>\n<li><strong>Views (implied):</strong> Handles HTTP requests, processes form submissions, interacts with the database, and renders Django templates. Specific views are suggested by template names (e.g., <code>dashboard</code>, <code>user_profile</code>, <code>report</code>, <code>addCourse</code>, <code>addTopic</code>, <code>edit_user</code>, <code>editCourse</code>, <code>editTrackedTime</code>).</li>\n<li><strong>API Endpoints (implied by <code>Timer.jsx</code>):</strong> Provides RESTful endpoints for managing courses (<code>/api/courses/</code>), topics (<code>/api/courses/{id}/topics/</code>), and timer operations (<code>/api/get-active-timer/</code>, <code>/api/start-timer/</code>, <code>/api/stop-timer/</code>).</li>\n<li><strong>Consumers (<code>consumers.ActiveNowConsumer</code>):</strong> Handles WebSocket connections for the <code>/ws/active-now/</code> endpoint, managing real-time updates for active users.</li>\n<li><strong>Templates:</strong> A collection of HTML templates (<code>.html</code> files) for various pages (dashboard, profile, login, signup, forms) and reusable partials (<code>partials/topics.html</code>, <code>partials/active_users.html</code>, <code>entries.html</code>). These templates often incorporate HTMX for dynamic content.</li>\n</ul></li>\n<li><strong>React Components (<code>assets/myComponents/</code>):</strong>\n<ul>\n<li><strong><code>Timer.jsx</code>:</strong> A client-side component responsible for the interactive time tracking interface. It allows users to select a course and topic, enter a session description, and start/stop a timer. It communicates with the Django backend via <code>axios</code> for API calls and <code>WebSocket</code> for real-time signaling. It also fetches existing active timer data on load.</li>\n<li><strong><code>ActiveNow.jsx</code>:</strong> A client-side component that establishes a WebSocket connection to <code>/ws/active-now/</code> to receive and display real-time information about currently active users, including their username, total active time today, and what they are currently studying.</li>\n</ul></li>\n<li><strong>UI Utilities &amp; Libraries:</strong>\n<ul>\n<li><strong>Shadcn UI components:</strong> <code>Button</code>, <code>Input</code>, <code>Select</code> are used to build the interactive elements of the React components, providing a consistent and accessible user experience.</li>\n<li><strong><code>assets/shadcn/lib/utils.ts</code>:</strong> Contains utility functions like <code>cn</code> for conditionally joining Tailwind CSS classes.</li>\n<li><strong><code>tailwind.config.js</code> &amp; <code>postcss.config.js</code>:</strong> Configuration files for the Tailwind CSS framework, defining custom design tokens (colors, border-radius, shadows) and enabling plugins like <code>tailwindcss-animate</code>.</li>\n<li><strong><code>tsconfig.json</code>:</strong> TypeScript compiler configuration, including path aliases for easier module imports within the frontend codebase.</li>\n</ul></li>\n</ul>\n",
      "data_model": "<p>The application's data is structured around several key entities, primarily defined in the <code>firstApp/migrations</code> files:</p>\n\n<ul>\n<li><p><strong><code>myUserDB</code></strong></p>\n\n<ul>\n<li>Represents a user of the system. It extends Django's default user model, adding custom fields.</li>\n<li><code>username</code> (CharField, Primary Key, Unique, max_length=32)</li>\n<li><code>email</code> (EmailField, blank=True, max_length=254)</li>\n<li><code>bio</code> (TextField, blank=True, null=True)</li>\n<li><code>timezone</code> (TimeZoneField, default='Asia/Dhaka', null=True)</li>\n<li>Includes standard Django user fields like <code>password</code>, <code>last_login</code>, <code>is_superuser</code>, <code>first_name</code>, <code>last_name</code>, <code>is_staff</code>, <code>is_active</code>, <code>date_joined</code>, <code>groups</code>, <code>user_permissions</code>.</li>\n</ul></li>\n<li><p><strong><code>Course</code></strong></p>\n\n<ul>\n<li>Represents an academic course or a general category for time tracking.</li>\n<li><code>id</code> (BigAutoField, Primary Key)</li>\n<li><code>name</code> (CharField, max_length=128)</li>\n<li><code>isArchived</code> (BooleanField, default=False)</li>\n<li><code>user</code> (ForeignKey to <code>myUserDB</code>, on<em>delete=CASCADE, related</em>name='CourseUnderUser') - Links a course to its owning user.</li>\n</ul></li>\n<li><p><strong><code>Topic</code></strong></p>\n\n<ul>\n<li>Represents a specific topic or sub-category within a course.</li>\n<li><code>id</code> (BigAutoField, Primary Key)</li>\n<li><code>name</code> (CharField, max_length=128)</li>\n<li><code>course</code> (ForeignKey to <code>Course</code>, on<em>delete=SET</em>NULL, null=True, related_name='TopicUnderCourse') - Links a topic to an optional course.</li>\n<li><code>user</code> (ForeignKey to <code>myUserDB</code>, on<em>delete=CASCADE, related</em>name='TopicUnderUser') - Links a topic to its owning user.</li>\n</ul></li>\n<li><p><strong><code>TrackedTimeDB</code></strong></p>\n\n<ul>\n<li>Records individual time tracking sessions.</li>\n<li><code>id</code> (BigAutoField, Primary Key)</li>\n<li><code>startTime</code> (DateTimeField) - The start time of the session.</li>\n<li><code>endTime</code> (DateTimeField, blank=True, null=True) - The end time of the session (can be null if session is ongoing).</li>\n<li><code>duration</code> (DurationField, blank=True, null=True) - The calculated duration of the session.</li>\n<li><code>session</code> (CharField, max_length=128, blank=True, null=True) - A description of what was worked on during the session.</li>\n<li><code>user</code> (ForeignKey to <code>myUserDB</code>, on<em>delete=CASCADE, related</em>name='trackedTimeUnderUser') - Links the tracked session to the user who recorded it.</li>\n<li><code>course</code> (ForeignKey to <code>Course</code>, on<em>delete=SET</em>NULL, blank=True, null=True, related_name='trackedTimeUnderCourse') - Links the session to an optional course.</li>\n<li><code>topic</code> (ForeignKey to <code>Topic</code>, on<em>delete=SET</em>NULL, blank=True, null=True, related_name='trackedTimeUnderTopic') - Links the session to an optional topic.</li>\n</ul></li>\n</ul>\n"
    }
  },
  "https://github.com/heytamjid/banking-management-system": {
    "timestamp": 1755768760.4359047,
    "commit": "e0f3174661fc241007b3ef52e42dcfaadf1ad543",
    "summary": {
      "purpose_scope": "<p>This repository contains a simple, command-line based banking system implemented in Python. Its primary purpose is to simulate basic banking operations for both users and administrators.</p>\n\n<p>The scope of this system includes:\n*   <strong>User Account Management</strong>: Creation, login, balance inquiry, deposit, withdrawal, fund transfer, loan application, and transaction history viewing.\n*   <strong>Administrator Account Management</strong>: Creation, login, monitoring of total bank balance and total outstanding loans, and control over the bank's loan feature.\n*   <strong>In-Memory Data Storage</strong>: All data is stored in volatile memory, meaning it is lost upon program termination.</p>\n",
      "system_architecture": "<p>The system follows a monolithic architecture, with all core functionalities encapsulated within a single <code>Bank</code> class in <code>main.py</code>.</p>\n\n<ul>\n<li><strong>Core Logic</strong>: The <code>Bank</code> class manages all user and administrative operations, including account data, financial transactions, and system settings.</li>\n<li><strong>Data Storage</strong>: Data is stored entirely in-memory using Python lists and scalar variables within the <code>Bank</code> class instance. There is no external database or persistent storage mechanism.</li>\n<li><strong>User Interface</strong>: Interaction is exclusively through a Command-Line Interface (CLI), utilizing <code>input()</code> for user commands and <code>print()</code> for displaying information and menus.</li>\n<li><strong>Execution Flow</strong>: The application runs in a continuous loop, presenting a main menu for user and admin login/account creation. Upon successful login, users or admins are directed to their respective dashboards to perform operations until they choose to log out or exit the application.</li>\n</ul>\n",
      "core_components": "<p>The system's functionality is primarily driven by the <code>Bank</code> class and its methods.</p>\n\n<ul>\n<li><strong><code>Bank</code> Class</strong>:\n<ul>\n<li><strong>Initialization (<code>__init__</code>)</strong>: Sets up all in-memory data structures (lists for user/admin data, balances, transaction histories) and initializes bank-wide metrics (total balance, total loan) and features (loan feature status).</li>\n<li><strong>User Interface Methods</strong>:\n<ul>\n<li><code>UserLogInMenu()</code>: Displays the main menu for account creation, user login, admin account creation, and admin login.</li>\n<li><code>userDashBoard()</code>: Presents options available to a logged-in user.</li>\n<li><code>adminDashBoard()</code>: Presents options available to a logged-in administrator.</li>\n</ul></li>\n<li><strong>User Account Management</strong>:\n<ul>\n<li><code>CreateANewAccount()</code>: Handles the creation of new user accounts, collecting name and password, and assigning a unique UserID. It initializes the user's balance, loan status, and transaction history.</li>\n<li><code>UserLogIn()</code>: Authenticates a user based on their UserID and password. Manages login tokens to track active user sessions.</li>\n</ul></li>\n<li><strong>Financial Transaction Methods</strong>:\n<ul>\n<li><code>depositeAmount(id)</code>: Allows a user to deposit funds into their account, updating their balance and the bank's total balance. Records the transaction in history.</li>\n<li><code>withdrawAmount(id)</code>: Enables a user to withdraw funds, checking for sufficient balance in both the user's account and the bank's total. Records the transaction.</li>\n<li><code>checkAmount(id)</code>: Displays the current balance and outstanding loan amount for a specific user.</li>\n<li><code>transferAmount(id)</code>: Facilitates transferring funds from one user account to another, including checks for sufficient balance and valid receiver ID. Records transactions for both sender and receiver.</li>\n<li><code>takeLoan(id)</code>: Allows a user to apply for a loan, subject to the bank's loan feature status, a maximum loan limit (twice the current balance plus existing loan), and the bank's total available balance. Updates user balance, loan amount, and bank's total loan and balance. Records the transaction.</li>\n<li><code>history(id)</code>: Displays the transaction history for a given user.</li>\n</ul></li>\n<li><strong>Admin Account Management</strong>:\n<ul>\n<li><code>createadminacc()</code>: Handles the creation of new admin accounts, collecting post/email and password, and assigning a unique AdminID.</li>\n<li><code>loginadminacc()</code>: Authenticates an administrator based on their AdminID and password. Manages admin login tokens.</li>\n</ul></li>\n<li><strong>Admin Oversight Methods</strong>:\n<ul>\n<li>Direct access to <code>totalbankbalance</code> and <code>totalloan</code> for reporting.</li>\n<li><code>loanfeaturecontrol()</code>: Allows an administrator to toggle the bank's loan feature on or off, affecting whether users can apply for loans.</li>\n</ul></li>\n<li><strong>Basic Error Handling</strong>: Includes <code>try-except</code> blocks for input type conversions and logical checks for invalid IDs or insufficient funds.</li>\n</ul></li>\n</ul>\n",
      "data_model": "<p>The system's data model is entirely in-memory, represented by Python lists and scalar variables within the <code>Bank</code> class. User and admin data are stored in parallel lists, where the index often corresponds to the UserID or AdminID.</p>\n\n<p><strong>User-Specific Data:</strong>\n*   <code>self.useriddb</code>: <code>list</code> - Stores user IDs. The index <code>i</code> corresponds to UserID <code>i</code>. A value of <code>i</code> indicates the user exists, <code>-1</code> indicates the account is closed.\n*   <code>self.passworddb</code>: <code>list</code> - Stores passwords for users, indexed by UserID.\n*   <code>self.namedb</code>: <code>list</code> - Stores names or emails of account holders, indexed by UserID.\n*   <code>self.phonedb</code>: <code>list</code> - Intended for phone numbers, but currently not actively used in account creation.\n*   <code>self.logintokendb</code>: <code>list</code> - Stores login status for users (1 for logged in, 0 for logged out), indexed by UserID.\n*   <code>self.amountdb</code>: <code>list</code> - Stores the current balance for each user account, indexed by UserID.\n*   <code>self.loandb</code>: <code>list</code> - Stores the outstanding loan amount for each user. A negative value indicates a loan (e.g., -100 means 100 BDT loan), indexed by UserID.\n*   <code>self.transactionhistory</code>: <code>list</code> of <code>list</code>s - A 2D list where <code>transactionhistory[i]</code> is a list of strings detailing transactions for UserID <code>i</code>.\n*   <code>self.topuserid</code>: <code>int</code> - The next available UserID to be assigned to a new account.</p>\n\n<p><strong>Administrator-Specific Data:</strong>\n*   <code>self.adminiddb</code>: <code>list</code> - Stores admin IDs. Similar to <code>useriddb</code>.\n*   <code>self.adminpostdb</code>: <code>list</code> - Stores admin posts or emails, indexed by AdminID.\n*   <code>self.adminpassworddb</code>: <code>list</code> - Stores passwords for admins, indexed by AdminID.\n*   <code>self.adminlogintokendb</code>: <code>list</code> - Stores login status for admins, indexed by AdminID.\n*   <code>self.topadminid</code>: <code>int</code> - The next available AdminID to be assigned to a new admin account.</p>\n\n<p><strong>Bank-Wide Data:</strong>\n*   <code>self.totalbankbalance</code>: <code>float</code> - The aggregate sum of all funds held by the bank across all user accounts.\n*   <code>self.totalloan</code>: <code>float</code> - The aggregate sum of all outstanding loans granted by the bank.\n*   <code>self.loanfeature</code>: <code>int</code> (0 or 1) - A flag indicating whether the loan feature is currently enabled (1) or disabled (0) for users.</p>\n"
    }
  }
}