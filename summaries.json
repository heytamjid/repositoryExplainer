{
  "https://github.com/heytamjid/django-course": {
    "timestamp": 1755730452.5164018,
    "commit": "e3f7243e6435174cdda418b864f46599e30ac4e0",
    "summary": {
      "purpose_scope": "<p>Based on the provided files, this repository contains two distinct Django projects: <code>myproject</code> and <code>mytasks-webapp-django</code>.</p>\n\n<p><code>myproject</code>: This project appears to be a simple Django application serving a list of meals via a view (<code>myapp/views.py</code>) and template (<code>myapp/test.html</code>).  The data is hardcoded within the view.</p>\n\n<p><code>mytasks-webapp-django</code>: This project is a task management web application. It allows users to add, edit, delete, mark as complete, and manage tasks.  The application uses a database to store task information.</p>\n",
      "system_architecture": "<p>The repository contains two separate Django projects, each with its own <code>settings.py</code>, <code>urls.py</code>, <code>wsgi.py</code>, and <code>asgi.py</code> files.  Both projects utilize a standard Django project structure.  <code>mytasks-webapp-django</code> interacts with a database to manage tasks, while <code>myproject</code> uses hardcoded data.  The architecture is based on the Model-View-Controller (MVC) pattern, common in Django applications.</p>\n",
      "core_components": "<p><strong>myproject:</strong></p>\n\n<ul>\n<li>Uses Django's templating engine to render a list of meals.</li>\n<li>Data is hardcoded in <code>myapp/views.py</code>.</li>\n<li>No database interaction is evident.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n</ul>\n\n<p><strong>mytasks-webapp-django:</strong></p>\n\n<ul>\n<li>Uses Django's ORM to interact with a SQLite database (<code>db.sqlite3</code>).</li>\n<li><code>main/models.py</code> defines the <code>Tasksmodel</code> with fields for title, description, and completion status.</li>\n<li><code>main/views.py</code> contains the view logic for handling user interactions (adding, editing, deleting, completing tasks).</li>\n<li><code>main/urls.py</code> defines URL routes for different actions.</li>\n<li>Includes basic Django app structure (urls, settings, wsgi, asgi).</li>\n<li>Uses Django's template engine for rendering views.</li>\n</ul>\n",
      "data_model": "<p><strong>mytasks-webapp-django:</strong></p>\n\n<p>The <code>main/models.py</code> file defines a single model:</p>\n\n<ul>\n<li><code>Tasksmodel</code>:\n<ul>\n<li><code>title</code> (CharField, max<em>length=64): The title of the task.</li>\n<li><code>description</code> (CharField, max</em>length=100): A description of the task.</li>\n<li><code>isCompleted</code> (BooleanField, default=False):  Indicates whether the task is completed.</li>\n</ul></li>\n</ul>\n\n<p><strong>myproject:</strong></p>\n\n<p>Insufficient information to generate this section.  No data model is explicitly defined.  Data is hardcoded within the <code>myapp/views.py</code> file.</p>\n"
    }
  },
  "https://github.com/heytamjid/dormitory-network": {
    "timestamp": 1755807720.0544496,
    "commit": "7001bd7fb4d49a4046c4cfb585ee85026040901e",
    "summary": {
      "purpose_scope": "<p>The Dormitory Network is a multi-functional Single Page Application (SPA) designed to facilitate academic and social interactions among users. Its primary purpose is to enable users to track their study time categorically, organize study sessions, and generate reports based on their tracked activities.</p>\n\n<p>Key functionalities include:\n*   <strong>Time Tracking:</strong> Users can track their live study times, associating sessions with specific courses and topics. This is achieved using HTMX for dynamic updates and sessions for state management.\n*   <strong>Study Organization:</strong> Users can create and manage courses and topics to categorize their study efforts.\n*   <strong>Reporting:</strong> The application generates reports (e.g., bar charts) on tracked time, leveraging Plotly JS, Pandas, and Django ORM for data analysis and visualization.\n*   <strong>User Profiles &amp; Community:</strong> Users have profiles, and the system aims to connect individuals with similar academic interests. A real-time \"Active Users\" feature shows who is currently studying.\n*   <strong>Content Sharing:</strong> The platform is intended to allow users to post \"academic rants,\" suggesting a forum or blog-like functionality.</p>\n\n<p>The scope of this application covers personal study management, basic community interaction, and data visualization for academic activities.</p>\n",
      "system_architecture": "<p>The Dormitory Network employs a hybrid architecture combining a Django backend with a React frontend, enhanced by HTMX for server-side rendered dynamic content and WebSockets for real-time communication.</p>\n\n<p><strong>Backend:</strong>\n*   <strong>Framework:</strong> Django (Python) serves as the primary web framework, handling routing, database interactions, user authentication, and business logic.\n*   <strong>Database:</strong> SQLite (default Django backend) is used, as indicated by <code>db.sqlite3</code>.\n*   <strong>API:</strong> Django REST Framework is integrated to provide RESTful API endpoints for managing courses, topics, and tracked time, and for timer functionalities.\n*   <strong>Asynchronous Communication/Real-time:</strong> Django Channels and Redis are used for WebSocket communication (<code>daphne</code> as the ASGI server, <code>channels_redis</code> as the channel layer backend), enabling real-time features like the \"Active Now\" user list.\n*   <strong>Static Files:</strong> <code>whitenoise</code> is used for serving static files in production.\n*   <strong>Debugging:</strong> Django Debug Toolbar is included for development-time debugging.</p>\n\n<p><strong>Frontend:</strong>\n*   <strong>Hybrid Rendering:</strong>\n    *   <strong>Server-Side Rendered (SSR) with HTMX:</strong> Many parts of the application (e.g., dashboard, forms, tracked time entries, dynamic dropdowns) are rendered by Django templates and dynamically updated using HTMX, minimizing the need for complex client-side JavaScript for basic interactions.\n    *   <strong>Client-Side Rendered (CSR) with React:</strong> Specific interactive components, such as the main timer and the \"Active Now\" display, are built with React. These components are bundled using Webpack (indicated by <code>hello_webpack.html</code> and <code>assets/index.jsx</code>).\n*   <strong>UI Library/Styling:</strong>\n    *   <strong>Shadcn UI:</strong> A React component library (<code>assets/shadcn/ui/input.tsx</code>, <code>assets/shadcn/ui/button.tsx</code>) is utilized for building UI elements.\n    *   <strong>Tailwind CSS:</strong> Used for utility-first styling across both Django templates and React components, with custom theming defined in <code>assets/index.css</code> including a dark mode.\n*   <strong>Charting:</strong> Plotly JS is used for generating data visualizations, specifically for reports.</p>\n\n<p><strong>Deployment &amp; Environment:</strong>\n*   Python 3.10 is the specified runtime.\n*   Node.js (v20.14.0) and npm (10.7.0) are required for frontend development (React, Webpack, Tailwind).\n*   Virtual environments (<code>env/</code>) and <code>node_modules/</code> are excluded from version control.</p>\n",
      "core_components": "<p><strong>1. User Management (<code>firstApp</code>):</strong>\n*   <strong>Custom User Model:</strong> <code>myUserDB</code> extends Django's <code>AbstractUser</code>, adding fields like <code>bio</code> and <code>timezone</code>.\n*   <strong>Authentication:</strong> Standard Django <code>UserCreationForm</code> and <code>AuthenticationForm</code> are used for <code>signup</code> and <code>login</code>.\n*   <strong>User Profiles:</strong> Users can view and <code>edit_user</code> profiles (<code>userprofile.html</code>, <code>edit_user.html</code>).</p>\n\n<p><strong>2. Study Tracking (<code>firstApp</code>):</strong>\n*   <strong>Models:</strong>\n    *   <code>Course</code>: Represents a study course (<code>name</code>, <code>isArchived</code>, <code>user</code>).\n    *   <code>Topic</code>: Represents a topic within a course (<code>name</code>, <code>course</code>, <code>user</code>).\n    *   <code>TrackedTimeDB</code>: Records study sessions (<code>startTime</code>, <code>endTime</code>, <code>duration</code>, <code>course</code>, <code>topic</code>, <code>session</code>, <code>user</code>).\n*   <strong>Forms:</strong> Django <code>ModelForm</code>s (<code>CourseForm</code>, <code>TopicForm</code>, <code>TrackedTimeForm</code>) are used for creating and editing these entities.\n*   <strong>API Endpoints (DRF):</strong>\n    *   <code>CourseSerializer</code>, <code>TopicSerializer</code>, <code>TrackedTimeDBSerializer</code> provide API access for these models.\n    *   Endpoints exist for listing courses (<code>api/courses/</code>), topics (<code>api/topics/</code>), creating tracked time entries (<code>api/create/tracked-time/</code>), and managing the timer (<code>api/start-timer/</code>, <code>api/stop-timer/</code>, <code>api/get-active-timer/</code>).\n*   <strong>HTMX Integration:</strong> The dashboard (<code>dashboard.html</code>) heavily uses HTMX for dynamic interactions:\n    *   Selecting a course triggers an HTMX request to <code>getTopics</code> to populate the topic dropdown.\n    *   \"Start Tracking\" button sends data via HTMX to <code>startTimerClicked</code>.\n    *   Tracked sessions are dynamically rendered/updated in <code>#trackedTime</code> div via <code>renderEntry</code> endpoint.</p>\n\n<p><strong>3. Real-time Features (<code>firstApp</code>):</strong>\n*   <strong>Active Users:</strong> The <code>ActiveNow.jsx</code> React component establishes a WebSocket connection (<code>ws://.../ws/active-now/</code>) to receive real-time updates on active users, displaying their current study activity and total active time.</p>\n\n<p><strong>4. Reporting (<code>firstApp</code>):</strong>\n*   <strong>Report View:</strong> The <code>report.html</code> template allows users to select a date range.\n*   <strong>Chart Data:</strong> An HTMX-powered form sends the date range to <code>get_bar_chart_data</code> (via <code>hx-post</code>) to fetch data for generating a bar chart, which is then rendered in <code>#chart-container</code>. The <code>README.md</code> indicates Plotly JS and Pandas are used for this.</p>\n\n<p><strong>5. Frontend Components (<code>assets</code>):</strong>\n*   <strong>React Application:</strong> <code>App.jsx</code> serves as the root React component, embedding <code>Timer</code> and <code>ActiveNow</code> components.\n*   <strong>Timer Component:</strong> <code>Timer.jsx</code> (inferred from <code>App.jsx</code> and <code>timer.css</code>) is a client-side React component for managing and displaying the study timer.\n*   <strong>UI Components:</strong> <code>assets/shadcn/ui/input.tsx</code> and <code>assets/shadcn/ui/button.tsx</code> are examples of reusable React UI components from Shadcn UI, styled with Tailwind CSS.</p>\n",
      "data_model": "<p>The application's data model is defined by the Django models within the <code>firstApp</code> application.</p>\n\n<p><strong>1. <code>myUserDB</code> (Custom User Model)</strong>\n*   <strong><code>username</code></strong>: <code>CharField</code>, max length 32, unique, primary key.\n*   <strong><code>bio</code></strong>: <code>TextField</code>, optional (blank, null).\n*   <strong><code>timezone</code></strong>: <code>TimeZoneField</code>, default 'Asia/Dhaka', optional (null).\n*   Inherits standard user fields from <code>AbstractUser</code> (e.g., <code>password</code>, <code>email</code>, <code>first_name</code>, <code>last_name</code>, <code>is_active</code>, <code>is_staff</code>, <code>is_superuser</code>, <code>date_joined</code>, <code>last_login</code>).</p>\n\n<p><strong>2. <code>Course</code></strong>\n*   <strong><code>id</code></strong>: Implicit <code>BigAutoField</code> primary key (Django default).\n*   <strong><code>name</code></strong>: <code>CharField</code>, max length 128.\n*   <strong><code>isArchived</code></strong>: <code>BooleanField</code>, default <code>False</code>.\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. A course is strongly tied to a user. <code>related_name='CourseUnderUser'</code>.</p>\n\n<p><strong>3. <code>Topic</code></strong>\n*   <strong><code>id</code></strong>: Implicit <code>BigAutoField</code> primary key (Django default).\n*   <strong><code>name</code></strong>: <code>CharField</code>, max length 128.\n*   <strong><code>course</code></strong>: <code>ForeignKey</code> to <code>Course</code>, <code>on_delete=models.SET_NULL</code>, optional (null). A topic can be associated with a course, but not strictly required (can be null). <code>related_name='TopicUnderCourse'</code>.\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. A topic is strongly tied to a user. <code>related_name='TopicUnderUser'</code>.</p>\n\n<p><strong>4. <code>TrackedTimeDB</code></strong>\n*   <strong><code>id</code></strong>: Implicit <code>BigAutoField</code> primary key (Django default).\n*   <strong><code>user</code></strong>: <code>ForeignKey</code> to <code>myUserDB</code>, <code>on_delete=models.CASCADE</code>. A tracked session is strongly tied to a user. <code>related_name='trackedTimeUnderUser'</code>.\n*   <strong><code>startTime</code></strong>: <code>DateTimeField</code>.\n*   <strong><code>endTime</code></strong>: <code>DateTimeField</code>, optional (null, blank). Allows for ongoing sessions.\n*   <strong><code>duration</code></strong>: <code>DurationField</code>, optional (null, blank). Stores the calculated duration of the session.\n*   <strong><code>course</code></strong>: <code>ForeignKey</code> to <code>Course</code>, <code>on_delete=models.SET_NULL</code>, optional (null, blank). A session can be associated with a course. <code>related_name='trackedTimeUnderCourse'</code>.\n*   <strong><code>topic</code></strong>: <code>ForeignKey</code> to <code>Topic</code>, <code>on_delete=models.SET_NULL</code>, optional (null, blank). A session can be associated with a topic. <code>related_name='trackedTimeUnderTopic'</code>.\n*   <strong><code>session</code></strong>: <code>CharField</code>, max length 128, optional (null, blank). Likely a description or name for the specific study session.</p>\n"
    }
  },
  "https://github.com/heytamjid/banking-management-system": {
    "timestamp": 1755768760.4359047,
    "commit": "e0f3174661fc241007b3ef52e42dcfaadf1ad543",
    "summary": {
      "purpose_scope": "<p>This repository contains a simple, command-line based banking system implemented in Python. Its primary purpose is to simulate basic banking operations for both users and administrators.</p>\n\n<p>The scope of this system includes:\n*   <strong>User Account Management</strong>: Creation, login, balance inquiry, deposit, withdrawal, fund transfer, loan application, and transaction history viewing.\n*   <strong>Administrator Account Management</strong>: Creation, login, monitoring of total bank balance and total outstanding loans, and control over the bank's loan feature.\n*   <strong>In-Memory Data Storage</strong>: All data is stored in volatile memory, meaning it is lost upon program termination.</p>\n",
      "system_architecture": "<p>The system follows a monolithic architecture, with all core functionalities encapsulated within a single <code>Bank</code> class in <code>main.py</code>.</p>\n\n<ul>\n<li><strong>Core Logic</strong>: The <code>Bank</code> class manages all user and administrative operations, including account data, financial transactions, and system settings.</li>\n<li><strong>Data Storage</strong>: Data is stored entirely in-memory using Python lists and scalar variables within the <code>Bank</code> class instance. There is no external database or persistent storage mechanism.</li>\n<li><strong>User Interface</strong>: Interaction is exclusively through a Command-Line Interface (CLI), utilizing <code>input()</code> for user commands and <code>print()</code> for displaying information and menus.</li>\n<li><strong>Execution Flow</strong>: The application runs in a continuous loop, presenting a main menu for user and admin login/account creation. Upon successful login, users or admins are directed to their respective dashboards to perform operations until they choose to log out or exit the application.</li>\n</ul>\n",
      "core_components": "<p>The system's functionality is primarily driven by the <code>Bank</code> class and its methods.</p>\n\n<ul>\n<li><strong><code>Bank</code> Class</strong>:\n<ul>\n<li><strong>Initialization (<code>__init__</code>)</strong>: Sets up all in-memory data structures (lists for user/admin data, balances, transaction histories) and initializes bank-wide metrics (total balance, total loan) and features (loan feature status).</li>\n<li><strong>User Interface Methods</strong>:\n<ul>\n<li><code>UserLogInMenu()</code>: Displays the main menu for account creation, user login, admin account creation, and admin login.</li>\n<li><code>userDashBoard()</code>: Presents options available to a logged-in user.</li>\n<li><code>adminDashBoard()</code>: Presents options available to a logged-in administrator.</li>\n</ul></li>\n<li><strong>User Account Management</strong>:\n<ul>\n<li><code>CreateANewAccount()</code>: Handles the creation of new user accounts, collecting name and password, and assigning a unique UserID. It initializes the user's balance, loan status, and transaction history.</li>\n<li><code>UserLogIn()</code>: Authenticates a user based on their UserID and password. Manages login tokens to track active user sessions.</li>\n</ul></li>\n<li><strong>Financial Transaction Methods</strong>:\n<ul>\n<li><code>depositeAmount(id)</code>: Allows a user to deposit funds into their account, updating their balance and the bank's total balance. Records the transaction in history.</li>\n<li><code>withdrawAmount(id)</code>: Enables a user to withdraw funds, checking for sufficient balance in both the user's account and the bank's total. Records the transaction.</li>\n<li><code>checkAmount(id)</code>: Displays the current balance and outstanding loan amount for a specific user.</li>\n<li><code>transferAmount(id)</code>: Facilitates transferring funds from one user account to another, including checks for sufficient balance and valid receiver ID. Records transactions for both sender and receiver.</li>\n<li><code>takeLoan(id)</code>: Allows a user to apply for a loan, subject to the bank's loan feature status, a maximum loan limit (twice the current balance plus existing loan), and the bank's total available balance. Updates user balance, loan amount, and bank's total loan and balance. Records the transaction.</li>\n<li><code>history(id)</code>: Displays the transaction history for a given user.</li>\n</ul></li>\n<li><strong>Admin Account Management</strong>:\n<ul>\n<li><code>createadminacc()</code>: Handles the creation of new admin accounts, collecting post/email and password, and assigning a unique AdminID.</li>\n<li><code>loginadminacc()</code>: Authenticates an administrator based on their AdminID and password. Manages admin login tokens.</li>\n</ul></li>\n<li><strong>Admin Oversight Methods</strong>:\n<ul>\n<li>Direct access to <code>totalbankbalance</code> and <code>totalloan</code> for reporting.</li>\n<li><code>loanfeaturecontrol()</code>: Allows an administrator to toggle the bank's loan feature on or off, affecting whether users can apply for loans.</li>\n</ul></li>\n<li><strong>Basic Error Handling</strong>: Includes <code>try-except</code> blocks for input type conversions and logical checks for invalid IDs or insufficient funds.</li>\n</ul></li>\n</ul>\n",
      "data_model": "<p>The system's data model is entirely in-memory, represented by Python lists and scalar variables within the <code>Bank</code> class. User and admin data are stored in parallel lists, where the index often corresponds to the UserID or AdminID.</p>\n\n<p><strong>User-Specific Data:</strong>\n*   <code>self.useriddb</code>: <code>list</code> - Stores user IDs. The index <code>i</code> corresponds to UserID <code>i</code>. A value of <code>i</code> indicates the user exists, <code>-1</code> indicates the account is closed.\n*   <code>self.passworddb</code>: <code>list</code> - Stores passwords for users, indexed by UserID.\n*   <code>self.namedb</code>: <code>list</code> - Stores names or emails of account holders, indexed by UserID.\n*   <code>self.phonedb</code>: <code>list</code> - Intended for phone numbers, but currently not actively used in account creation.\n*   <code>self.logintokendb</code>: <code>list</code> - Stores login status for users (1 for logged in, 0 for logged out), indexed by UserID.\n*   <code>self.amountdb</code>: <code>list</code> - Stores the current balance for each user account, indexed by UserID.\n*   <code>self.loandb</code>: <code>list</code> - Stores the outstanding loan amount for each user. A negative value indicates a loan (e.g., -100 means 100 BDT loan), indexed by UserID.\n*   <code>self.transactionhistory</code>: <code>list</code> of <code>list</code>s - A 2D list where <code>transactionhistory[i]</code> is a list of strings detailing transactions for UserID <code>i</code>.\n*   <code>self.topuserid</code>: <code>int</code> - The next available UserID to be assigned to a new account.</p>\n\n<p><strong>Administrator-Specific Data:</strong>\n*   <code>self.adminiddb</code>: <code>list</code> - Stores admin IDs. Similar to <code>useriddb</code>.\n*   <code>self.adminpostdb</code>: <code>list</code> - Stores admin posts or emails, indexed by AdminID.\n*   <code>self.adminpassworddb</code>: <code>list</code> - Stores passwords for admins, indexed by AdminID.\n*   <code>self.adminlogintokendb</code>: <code>list</code> - Stores login status for admins, indexed by AdminID.\n*   <code>self.topadminid</code>: <code>int</code> - The next available AdminID to be assigned to a new admin account.</p>\n\n<p><strong>Bank-Wide Data:</strong>\n*   <code>self.totalbankbalance</code>: <code>float</code> - The aggregate sum of all funds held by the bank across all user accounts.\n*   <code>self.totalloan</code>: <code>float</code> - The aggregate sum of all outstanding loans granted by the bank.\n*   <code>self.loanfeature</code>: <code>int</code> (0 or 1) - A flag indicating whether the loan feature is currently enabled (1) or disabled (0) for users.</p>\n"
    }
  }
}